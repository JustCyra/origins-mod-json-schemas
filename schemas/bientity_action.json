{
	"$id": "https://snavesutit.github.io/origins-mod-schemas/",
	"title": "Bi-entity Action",
	"description": "Bi-entity Action Types operate on a Pair<Entity, Entity>; in simpler terms: an actor and a target. The actor and target is determined depending on the used power type, and can be swapped. These are available to power/action types that provides a bientity_action object field.",
	"type": "object",
	"required": [
		"type"
	],
	"properties": {
		"type": {
			"description": "The ID of the Bi-entity Action",
			"$ref": "./types/identifier.json"
		}
	},
	"allOf": [
		{
			"allOf": [
				{
					"if": {
						"properties": {
							"type": {
								"oneOf": [
									{
										"const": "apoli:actor_action"
									},
									{
										"const": "origins:actor_action"
									}
								]
							}
						}
					},
					"then": {
						"$ref": "apoli/bientity_actions/actor_action.json"
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"oneOf": [
									{
										"const": "apoli:add_velocity"
									},
									{
										"const": "origins:add_velocity"
									}
								]
							}
						}
					},
					"then": {
						"$ref": "apoli/bientity_actions/add_velocity.json"
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"oneOf": [
									{
										"const": "apoli:damage"
									},
									{
										"const": "origins:damage"
									}
								]
							}
						}
					},
					"then": {
						"$ref": "apoli/bientity_actions/damage.json"
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"oneOf": [
									{
										"const": "apoli:dummy"
									},
									{
										"const": "origins:dummy"
									}
								]
							}
						}
					},
					"then": {
						"$ref": "apoli/bientity_actions/dummy.json"
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"oneOf": [
									{
										"const": "apoli:invert"
									},
									{
										"const": "origins:invert"
									}
								]
							}
						}
					},
					"then": {
						"$ref": "apoli/bientity_actions/invert.json"
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"oneOf": [
									{
										"const": "apoli:mount"
									},
									{
										"const": "origins:mount"
									}
								]
							}
						}
					},
					"then": {
						"$ref": "apoli/bientity_actions/mount.json"
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"oneOf": [
									{
										"const": "apoli:set_in_love"
									},
									{
										"const": "origins:set_in_love"
									}
								]
							}
						}
					},
					"then": {
						"$ref": "apoli/bientity_actions/set_in_love.json"
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"oneOf": [
									{
										"const": "apoli:tame"
									},
									{
										"const": "origins:tame"
									}
								]
							}
						}
					},
					"then": {
						"$ref": "apoli/bientity_actions/tame.json"
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"oneOf": [
									{
										"const": "apoli:target_action"
									},
									{
										"const": "origins:target_action"
									}
								]
							}
						}
					},
					"then": {
						"$ref": "apoli/bientity_actions/target_action.json"
					}
				}
			]
		},
		{
			"allOf": [
				{
					"if": {
						"properties": {
							"type": {
								"oneOf": [
									{
										"const": "apoli:and"
									},
									{
										"const": "origins:and"
									}
								]
							}
						}
					},
					"then": {
						"$id": "https://snavesutit.github.io/origins-mod-schemas/",
						"title": "Meta Action And",
						"description": "Meta Action Types are independent of the type they operate on. They basically combine or modify other action types. The actions which are modified have to be of the type the field of the meta action type requires. For example, if you have a field which requires an Entity Action Type and you insert a Delay (Meta Action Type), the action type you need to provide inside that meta action type will have to be an Entity Action Type as well.\nType: 'origins:and'\n- Executes all provided actions in order.",
						"type": "object",
						"required": [
							"actions"
						],
						"properties": {
							"actions": {
								"description": "These actions will be executed one after the other (but in the same tick).",
								"type": "array",
								"items": {
									"$ref": "./bientity_action.json"
								}
							}
						}
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"oneOf": [
									{
										"const": "apoli:chance"
									},
									{
										"const": "origins:chance"
									}
								]
							}
						}
					},
					"then": {
						"$id": "https://snavesutit.github.io/origins-mod-schemas/",
						"title": "Meta Action Chance",
						"description": "Meta Action Types are independent of the type they operate on. They basically combine or modify other action types. The actions which are modified have to be of the type the field of the meta action type requires. For example, if you have a field which requires an Entity Action Type and you insert a Delay (Meta Action Type), the action type you need to provide inside that meta action type will have to be an Entity Action Type as well.\nType: 'origins:chance'\n- Executes the provided action only with a specific chance.",
						"type": "object",
						"required": [
							"action"
						],
						"properties": {
							"action": {
								"description": "The action which might be executed.",
								"$ref": "./bientity_action.json"
							},
							"chance": {
								"description": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance).",
								"type": "number",
								"minimum": 0,
								"maximum": 1
							},
							"fail_action": {
								"description": "The action to execute if the specified action in the action field is not executed.",
								"$ref": "./bientity_action.json"
							}
						}
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"oneOf": [
									{
										"const": "apoli:choice"
									},
									{
										"const": "origins:choice"
									}
								]
							}
						}
					},
					"then": {
						"$id": "https://snavesutit.github.io/origins-mod-schemas/",
						"title": "Meta Action Choice",
						"description": "Meta Action Types are independent of the type they operate on. They basically combine or modify other action types. The actions which are modified have to be of the type the field of the meta action type requires. For example, if you have a field which requires an Entity Action Type and you insert a Delay (Meta Action Type), the action type you need to provide inside that meta action type will have to be an Entity Action Type as well.\nType: 'origins:choice'\n- Executes one of the provided actions, choosing randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.",
						"type": "object",
						"required": [
							"actions"
						],
						"properties": {
							"actions": {
								"description": "Each object has to have an element Action and a weight Integer.",
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"element": {
											"$ref": "./bientity_action.json"
										},
										"weight": {
											"type": "integer"
										}
									}
								}
							}
						}
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"oneOf": [
									{
										"const": "apoli:delay"
									},
									{
										"const": "origins:delay"
									}
								]
							}
						}
					},
					"then": {
						"$id": "https://snavesutit.github.io/origins-mod-schemas/",
						"title": "Meta Action Delay",
						"description": "Meta Action Types are independent of the type they operate on. They basically combine or modify other action types. The actions which are modified have to be of the type the field of the meta action type requires. For example, if you have a field which requires an Entity Action Type and you insert a Delay (Meta Action Type), the action type you need to provide inside that meta action type will have to be an Entity Action Type as well.\nType: 'origins:delay'\n- Executes the provided action after a set amount of ticks.",
						"type": "object",
						"required": [
							"action",
							"ticks"
						],
						"properties": {
							"action": {
								"description": "The action which will be executed after the delay.",
								"$ref": "./bientity_action.json"
							},
							"ticks": {
								"description": "The amount of ticks until the action is executed.",
								"type": "integer",
								"minimum": 1
							}
						}
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"oneOf": [
									{
										"const": "apoli:if_else"
									},
									{
										"const": "origins:if_else"
									}
								]
							}
						}
					},
					"then": {
						"$id": "https://snavesutit.github.io/origins-mod-schemas/",
						"title": "Meta Action If Else",
						"description": "Meta Action Types are independent of the type they operate on. They basically combine or modify other action types. The actions which are modified have to be of the type the field of the meta action type requires. For example, if you have a field which requires an Entity Action Type and you insert a Delay (Meta Action Type), the action type you need to provide inside that meta action type will have to be an Entity Action Type as well.\nType: 'origins:if_else'\n- Executes an action only if a condition holds, and optionally executes another action when it doesn't hold.",
						"type": "object",
						"required": [
							"condition",
							"if_action"
						],
						"properties": {
							"condition": {
								"description": "A condition based on the type of action.",
								"$ref": "./bientity_condition.json"
							},
							"if_action": {
								"description": "The action which is executed when the condition evaluates to true.",
								"$ref": "./bientity_action.json"
							},
							"else_action": {
								"description": "If present, this action will be executed when the condition evaluates to false.",
								"$ref": "./bientity_action.json"
							}
						}
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"oneOf": [
									{
										"const": "apoli:if_else_list"
									},
									{
										"const": "origins:if_else_list"
									}
								]
							}
						}
					},
					"then": {
						"$id": "https://snavesutit.github.io/origins-mod-schemas/",
						"title": "Meta Action If Else List",
						"description": "Meta Action Types are independent of the type they operate on. They basically combine or modify other action types. The actions which are modified have to be of the type the field of the meta action type requires. For example, if you have a field which requires an Entity Action Type and you insert a Delay (Meta Action Type), the action type you need to provide inside that meta action type will have to be an Entity Action Type as well.\nType: 'origins:if_else_list'\n- Checks a list of actions associated with conditions, and executes the first one in the list for which the condition holds. Basically a less indentation-heavy way to represent a deeply nested If-Else (Meta Action Type).",
						"type": "object",
						"required": [
							"actions"
						],
						"properties": {
							"actions": {
								"description": "Each object has to have an action Action Type object and a condition Condition Type object.",
								"type": "array",
								"items": {
									"type": "object",
									"required": [
										"action",
										"condition"
									],
									"properties": {
										"condition": {
											"$ref": "./bientity_condition.json"
										},
										"action": {
											"$ref": "./bientity_action.json"
										}
									}
								}
							}
						}
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"oneOf": [
									{
										"const": "apoli:nothing"
									},
									{
										"const": "origins:nothing"
									}
								]
							}
						}
					},
					"then": {
						"$id": "https://snavesutit.github.io/origins-mod-schemas/",
						"title": "Meta Action Nothing",
						"description": "Meta Action Types are independent of the type they operate on. They basically combine or modify other action types. The actions which are modified have to be of the type the field of the meta action type requires. For example, if you have a field which requires an Entity Action Type and you insert a Delay (Meta Action Type), the action type you need to provide inside that meta action type will have to be an Entity Action Type as well.\nType: 'origins:nothing'\n- Does nothing. Can be used as a backup in case an action is not optional in some place.",
						"type": "object",
						"properties": null
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"oneOf": [
									{
										"const": "apoli:side"
									},
									{
										"const": "origins:side"
									}
								]
							}
						}
					},
					"then": {
						"$id": "https://snavesutit.github.io/origins-mod-schemas/",
						"title": "Meta Action Side",
						"description": "Meta Action Types are independent of the type they operate on. They basically combine or modify other action types. The actions which are modified have to be of the type the field of the meta action type requires. For example, if you have a field which requires an Entity Action Type and you insert a Delay (Meta Action Type), the action type you need to provide inside that meta action type will have to be an Entity Action Type as well.\nType: 'origins:side'\n- Executes the specified action type on the specified \"side\".",
						"type": "object",
						"required": [
							"action"
						],
						"properties": {
							"action": {
								"description": "The action to execute.",
								"$ref": "./bientity_action.json"
							},
							"side": {
								"description": "Determines where to execute the specified action type. Accepts \"client\" or \"server\"",
								"enum": [
									"client",
									"server"
								]
							}
						}
					}
				}
			]
		}
	]
}